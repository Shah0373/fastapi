version: '3'
networks:
  fastapi-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          aux_addresses:
            nginx01: 172.28.1.24
          ip_range: 172.28.1.10/28

services:
  db01:
    image: ${database_hostname}-postgres
    restart: always
    build:
      context: db/
      dockerfile: Dockerfile
    hostname: ${database_hostname}
    # we dont need the .env name as we can just name our services as we need the hostname to be 
    ports:
      - "${database_port}"
    environment:
      - POSTGRES_USER=${database_username}
      - POSTGRES_PASSWORD=${database_password}
      - POSTGRES_DB=${database_name}
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # this will persist the data in /var/lib/postgresql/data locally so as to not lose all the data after a push
    networks:
      - fastapi-net
    deploy:
      replicas: 1
      # update_config:
      #   failure_action: rollback
      # placement:
      #   constraints:
      #     - node.labels.fastapi.db01 == true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:${database_port}"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
  server01:
    image: ${service_host}-fastapi
    restart: always
    build:
      context: server/
      dockerfile: Dockerfile
    hostname: ${service_host}
    working_dir: /fastapi
    volumes:
      - ./requirements.txt:/fastapi/requirements.txt
      - .:/fastapi/
    ports:
      - "${service_port}"
      - "${nginx_port}:${service_port}"
    environment:
      - database_hostname=${database_hostname}
      - database_port=${database_port}
      - database_password=${database_password}
      - database_name=${database_name}
      - database_username=${database_username}
      - secret_key=${secret_key}
      - algorithm=${algorithm}
      - access_token_expire_minutes=${access_token_expire_minutes}
      - service_port=${service_port}
      # - net_name=${net_name}
      - service_host=${service_host}
      - nginx_port=${nginx_port}
    env_file:
      - .env
    networks:
      - fastapi-net
    depends_on:
      - ${database_hostname}
    command:
      - bash
      - -c
      - |
        apt update
        pip install --upgrade pip
        pip install virtualenv
        virtualenv .venv
        source .venv/bin/activate
        pip install -r requirements.txt
        export PORT=$${PORT:-8000}
        echo "Running on port $$PORT"
        uvicorn app.main:app --host 0.0.0.0 --port $$PORT
      # $PORT is automatically set by docker when the container is started
    deploy:
      replicas: 3
      update_config:
        failure_action: rollback
      resources:
        limits:
          cpus: '3'
          memory: 2048M
        reservations:
          cpus: '0.5'
          memory: 64M
      #placement:
      #constraints:
      #- node.labels.fastapi.server01 == true
  nginx01:
    image: ${nginx_host}-nginx
    #sysctls:
    #   - net.ipv4.tcp_tw_reuse=1
    #   - net.ipv4.tcp_tw_recycle=1
    restart: always
    hostname: ${nginx_host}
    build:
      context: nginx/
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    environment:
      - service_host=${service_host}
      - net_name=${net_name}
      - api_worker=${api_worker}
      - nginx_port=${nginx_port}
      - nginx_host=${nginx_host}
    env_file:
      - .env
    depends_on:
      - ${service_host}
    networks:
      - fastapi-net
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:${nginx_port}/health"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      # update_config:
      #   failure_action: rollback
      #placement:
      #constraints:
      #- node.labels.fastapi.api_worker01 == true
  api_worker01:
    image: ${api_worker}-alpine
    build:
      context: api_worker/
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - create_user_json=${create_user_json}
      - samplepass=${samplepass}
      - samplepost=${samplepost}
      - sampleuser=${sampleuser}
      - service_host=${service_host}
      - service_port=${service_port}
      # - net_name=${net_name}
      - api_worker=${api_worker}
      - nginx_host=${nginx_host}
      - nginx_port=${nginx_port}
    env_file:
      - .env
    networks:
      - fastapi-net
    depends_on:
      - ${service_host}
    command:
      - sh
      - -c
      - |
        apk update
        apk upgrade
        apk add sed curl
        apk add jq
        until curl -L -H "Content-Type: application/json" -X POST -d '${create_user_json}' http://${service_host}:${service_port}/users; do sleep 1; done
        RESPO=$$(curl -L -X POST -d "username=${sampleuser}&password=${samplepass}" http://${service_host}:${service_port}/login)
        ACCESS=$$(echo $$RESPO | jq -r '.access_token')
        until curl -L -X POST http://${service_host}:${service_port}/posts -H "Authorization: Bearer $$ACCESS" -H "Content-Type: application/json" -d '${samplepost}'; do sleep 1; done
    deploy:
      replicas: 1
      # update_config:
      #   failure_action: rollback
      #placement:
      #constraints:
      #- node.labels.fastapi.api_worker01 == true

volumes:
  postgres-data:
